{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAS,IACnBP,GAAc,SAAAQ,GAAU,OAAMN,GAAN,mBAAqBM,OAC7CL,EAAc,MAKlB,SACI,uBACIM,KAAK,OACLC,MAAQR,EACRS,SAjBc,SAACN,GACvBF,EAAeE,EAAEO,OAAOF,a,+BCNnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACqCC,UAAUH,GAD/C,yEAEKI,MAAOF,GAFZ,cAEbG,EAFa,gBAGIA,EAAUC,OAHd,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,IAC1B,MAAO,CACHC,GAAE,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAKC,GACTC,MAAK,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAKE,MACZV,IAAG,OAAEQ,QAAF,IAAEA,GAAF,UAAEA,EAAKG,cAAP,iBAAE,EAAaC,wBAAf,aAAE,EAA+BZ,QAG5Ca,QAAQC,IAAIR,GAZO,kBAaZA,GAbY,4CAAH,sDCSLS,MATf,YAA2C,EAAnBN,GAAoB,IAAhBC,EAAe,EAAfA,MAAOV,EAAQ,EAARA,IAC/B,OACI,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,QCsBFS,EAvBC,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAEf,ECHwB,SAAEA,GAE1B,MAA0Bb,mBAAS,CAC/BoB,KAAK,GACLe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACP1B,EAASC,GACJ0B,MAAM,SAAAb,GACHW,EAAS,CACLjB,KAAMM,EACNS,SAAS,SAGvB,CAACtB,IAIIuB,EDhB2BI,CAAc3B,GAAlCa,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAEtB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDlB,EAArD,OACEsB,GAAW,mBAAGJ,UAAU,mCAAb,wBACd,qBAAKA,UAAU,YAAf,SAGaL,EAAOJ,KAAK,SAAAmB,GAAK,OACb,cAAC,EAAD,eAESA,GADCA,EAAMjB,aEd/BkB,EAAe,WAC1B,MAAoC1C,mBAAS,CAAC,mBAA9C,mBAAOO,EAAP,KAAmBR,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEMQ,EAAWe,KAAI,SAAET,GAAF,OACX,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,YCV1B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.050fcc65.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.length > 2) {\n            setCategories(categories => [ inputValue, ...categories ]);\n            setInputValue('');\n        } \n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n\n","\n\nexport const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${  encodeURI(category) }&limit=10&offset=10&api_key=PwHN62PG3VkUzN8T8kyU5SiZLgAnvjFM`;\n    const respuesta = await fetch( url );\n    const { data } = await respuesta.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img?.id,\n            title: img?.title,\n            url: img?.images?.downsized_medium?.url\n        }\n    })\n    console.log(gifs);\n    return gifs;\n}","import React from 'react'\n\nfunction GifGridItem( { id, title, url } ) {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title} />\n            <p>{ title }</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React, { /* useState, useEffect */ } from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nimport GifGridItem from './GifGridItem';\n \nconst GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n           <div className=\"card-grid\">\n                \n                    { \n                        images.map( image => (\n                            <GifGridItem  \n                                key={ image.id }\n                                { ...image }\n                            />\n                        ))\n                    }\n            </div>\n        </>\n    );\n}\n \nexport default GifGrid;","\nimport { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( category )\n            .then( images => {\n                setState({\n                    data: images,\n                    loading: false\n                });\n            });\n    },[category]);\n\n    \n\n    return state; // { data:[], loading:true }\n}","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Rick and Morty\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories } />\n      <hr />\n\n      <ol>\n        {\n            categories.map(( category ) => (\n                <GifGrid\n                    key={ category }\n                    category={ category } \n                />\n            ))\n        }\n      </ol>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp }from './GifExpertApp';\n\nimport './index.css';\nimport 'animate.css'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}